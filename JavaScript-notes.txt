In String:
  Escape Characters:
    \' \" \n
  Three ways to create a string:
    1. '...'
    2. "..."
    3. `...` (Template Strings)
      Special features in Template String:
        1. You can use ${} to insert any other values.
        2. Multi-line string.
  Creating a comment:
    1. Javascript and CSS:
      /* TEXT */
      / TEXT /
    2. HTML
      <-- TEXT -->
Variables:
  Variable names can't be:
    1. Special words.
    2. Can't start with words.
    3. Can't use special characters except _ (underscore) and $ (dollar).
  Ways to create a Variable:
    let
      let variable_name = anything;
      can't be changed later, and harder to find the meaning cuz it keeps changing.
    const
      const variable_name = anything;
      can't be changed later, i.e. will be constant. 
Booleans:
  True or False
  Comparison Operators:
    > greater than
    < less than
    >= greater than or equal to
    <= less than or equal to
    === equal to
    !== not equal to
    We don't use == & != because it will convert both into same type before comparing
    Lowest priority among all the operations.

Scope
  After the if else statement using the curly brackets {} is reffered to as Scopes.
  Variables defined there will not go out of the scope, and hence avoid naming conflicts.

Falsy values
  false 
  0
  ''
  NaN (not a number)
  undefined
  null

If Else Statements
  Shortcuts:
    Ternary Operator (?):
      Example: true ? 'truthy' : 'falsy'
    Guard Operator (&&):
      Example: false && 'I am being guarded i.e. not being run'
    Default Operator (||):
      Example: currency = 'USD' || 'USD' 
        here, USD will be printed first but if USD was false, it would've gone for USD.

DOM, JSON and LocalStorage are built in objects. 

Objects
  Accessing values inside an Object 
    Dot Notation:
      Example: 
      > To access a property named 'name' inside the object productObject.
      > console.log(productObject.name);
    Bracket Notation:
      Allows us to use including special names that dot notation doesn't allow,
        be certain that the property is being defined using bracket notation as well.

      Example:
        > To access a propery named 'name' inside the object productObject.
        > console.log(productObject['name']);
  Nested Objects
    Example: 
      > const productObject = {
        name: 'Amazon',
        rating: {
          stars: 44,
          count: 9
        },
        fun: function functionName1(){
          console.log('I am a function inside an Object');
        }
      };

      Here, fun is a function. And a function inside an object is known as Method.
      Other examples of method is console.log(), Math.random(), etcetera.

  Destructuring an Object:
    You can either do:
      > const name = productObject.name;
    or
      > const { name } = prodcutObject;
      > const { name, rating.stars } = productObject;
  Objects are references
    i.e., they only contain they only refer to variables, they don't store the inside values.

Converting Javascript to JSON file
  Stringfy
    JSON.stringfy(objectName);
    > Example:
    > jsonString = JSON.stringfy(productObject);

Converting JSON file to Javascript
  Parse
    JSON.parse(jsonString);
     Example:
    > non_jsonString = JSON.parse(jsonString);

Saving data in Local Storage
  Local storage only supports strings.
  setItem
    > localStorage.setItem('String_Name', 'This_is_a_value_string');
  getItem
    > localStorage.getItem('AnotherString');

Removing Local Storage
  > localStorage.removeItem('score');

NULL vs UNDEFINED
  NULL when you want something to be intentionally empty.

